<html>
<head><title>Service Control</title></head>
<body>

<erl>

unicode_to_html(Char) ->
	case Char > 255 of
		true -> io_lib:format("&#~p;", [Char]);
		false -> Char
	end.

unicode_list_to_html(List) ->
	lists:map(fun unicode_to_html/1, List).

line_to_table_row(Line) when erlang:length(Line) >= 120 ->
	Dot = lists:sublist(Line, 1, 2),
	Unit = lists:sublist(Line, 3, 90),
	Load = lists:sublist(Line, 93, 10),
	Active = lists:sublist(Line, 103, 9),
	Sub = lists:sublist(Line, 112, 8),
	Desc = lists:sublist(Line, 120, 1000),
	{tr, [], [
		{td, [], unicode_list_to_html(Dot)},
		{td, [], unicode_list_to_html(Unit)},
		{td, [], unicode_list_to_html(Load)},
		{td, [], unicode_list_to_html(Active)},
		{td, [], unicode_list_to_html(Sub)},
		{td, [], unicode_list_to_html(Desc)}
	]};
line_to_table_row(Line) -> {tr, [], [{td, [], unicode_list_to_html(Line)}]}.

show_overview() ->
	RawData = os:cmd("systemctl list-units *.service"),
	Lines = string:tokens(RawData, "\r\n"),
	{table, [], lists:map(fun line_to_table_row/1, lists:sublist(Lines, erlang:length(Lines) - 5))}.
%	{pre, [], unicode_list_to_html(os:cmd("systemctl list-units *.service"))}.

show_service_status(Service) ->
	{pre, [], unicode_list_to_html(os:cmd("systemctl status " ++ Service))}.

restart_service(Service) ->
	{pre, [], unicode_list_to_html(os:cmd("systemctl restart " ++ Service))}.

allow_access({192, 168, 178, _}) -> true;
allow_access({127, 0, 0, _}) -> true;
allow_access(_) -> false.

out(Arg) ->
	{Ip, _} = Arg#arg.client_ip_port,
	Out = case allow_access(Ip) of
		true ->
			case queryvar(Arg, service) of
				{ok, Service} ->
					case queryvar(Arg, action) of
						{ok, "status"} ->
							show_service_status(Service);
						{ok, "restart"} ->
							restart_service(Service);
						{ok, Action} ->
							{p, [], io_lib:format("Unknown action: ~p", [Action])};
						undefined ->
							show_service_status(Service)
					end;
				undefined ->
					show_overview()
			end;
		false ->
			{p, [], "access denied"}
	end,
	{ehtml, Out}.

</erl>
</body>
</html>
