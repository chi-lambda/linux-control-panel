<html>
<head>
	<title>Service Control</title>
	<link rel="stylesheet" type="text/css" href="static/style.css" />
</head>
<body>

<erl>

unicode_to_html(Char) ->
	case Char > 255 of
		true -> io_lib:format("&#~p;", [Char]);
		false -> Char
	end.

unicode_list_to_html(List) ->
	lists:map(fun unicode_to_html/1, List).

load_to_class("loaded    ") -> "loaded";
load_to_class("not-found ") -> "notfound";
load_to_class("masked    ") -> "masked";
load_to_class(_) -> "".

active_to_class("active   ") -> "active";
active_to_class("inactive ") -> "inactive";
active_to_class("failed   ") -> "failed";
active_to_class(_) -> "".

sub_to_class("dead    ") -> "dead";
sub_to_class("exited  ") -> "exited";
sub_to_class("running ") -> "running";
sub_to_class("failed  ") -> "failed";
sub_to_class(_) -> "".

line_to_table_row(Line) when erlang:length(Line) >= 120 ->
	Dot = lists:sublist(Line, 1, 2),
	Unit = lists:sublist(Line, 3, 90),
	Load = lists:sublist(Line, 93, 10),
	Active = lists:sublist(Line, 103, 9),
	Sub = lists:sublist(Line, 112, 8),
	Desc = lists:sublist(Line, 120, 1000),
	{tr, [], [
		{td, [], unicode_list_to_html(Dot)},
		{td, [], unicode_list_to_html(Unit)},
		{td, [{class, load_to_class(Load)}], unicode_list_to_html(Load)},
		{td, [{class, active_to_class(Active)}], unicode_list_to_html(Active)},
		{td, [{class, sub_to_class(Sub)}], unicode_list_to_html(Sub)},
		{td, [], unicode_list_to_html(Desc)}
	]};
line_to_table_row(Line) -> {tr, [], [{td, [], unicode_list_to_html(Line)}]}.

show_overview() ->
	RawData = os:cmd("systemctl list-units *.service"),
	Lines = string:tokens(RawData, "\r\n"),
	{table, [], lists:map(fun line_to_table_row/1, lists:sublist(Lines, erlang:length(Lines) - 5))}.
%	{pre, [], unicode_list_to_html(os:cmd("systemctl list-units *.service"))}.

show_service_status(Service) ->
	{pre, [], unicode_list_to_html(os:cmd("systemctl status " ++ Service))}.

restart_service(Service) ->
	{pre, [], unicode_list_to_html(os:cmd("systemctl restart " ++ Service))}.

allow_access(#arg{client_ip_port = {{192, 168, 178, _},_}}) -> true;
allow_access(#arg{client_ip_port = {{127, 0, 0, _}, _}}) -> true;
allow_access(_) -> false.

service_and_action(Arg) when Arg#arg.pathinfo /= undefined ->
	list_to_tuple(string:tokens(Arg#arg.pathinfo, "/"));
service_and_action(Arg) ->
	case queryvar(Arg, service) of
		{ok, Service} ->
			case queryvar(Arg, action) of
				{ok, Action} -> {Service, Action};
				undefined -> {Service}
			end;
		undefined -> undefined
	end.

out(Arg) ->
	{Ip, _} = Arg#arg.client_ip_port,
	Out = case allow_access(Arg) of
		true ->
			case service_and_action(Arg) of
				{Service, "status"} -> show_service_status(Service);
				{Service, "restart"} -> restart_service(Service);
				{_, Action} -> {p, [], io_lib:format("Unknown action: ~p", [Action])};
				{Service} -> show_service_status(Service);
				undefined -> show_overview()
			end;
		false ->
			{h1, [], "access denied"}
	end,
	{ehtml, Out}.

</erl>
</body>
</html>
